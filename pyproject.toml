[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "learn-python-with-tests"
dynamic = ["version"]
description = 'Set of python examples of the basics and some tiny games'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["learning", "games"]
authors = [
  { name = "Sky Brewer", email = "jaco.brewer@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = []

[project.scripts]
tictactoe = "tictactoe.game:main_method"
guess_number = "guess_new_number:main"
hangman = "hangman:main"
wordle = "wordle:main"

[project.urls]
Documentation = "https://github.com/jacomago/learn-python-with-tests#readme"
Issues = "https://github.com/jacomago/learn-python-with-tests/issues"
Source = "https://github.com/jacomago/learn-python-with-tests"

[tool.hatch.version]
path = "src/learn_python_with_tests/__about__.py"

[project.optional-dependencies]
lint = [
  "black",
  "ruff",
  "mypy",
]
test = [
  "coverage[toml]>=6.5",
  "pytest>=7.2.0",
]
dev = [ # Everything needed for development
  "learn_python_with_tests[lint,test]",
]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests"]

[tool.hatch.build.targets.wheel]


[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report", "coverage xml"]
cov = ["test-cov", "cov-report"]
docs = ["make -C docs html"]
docs-live = ["sphinx-autobuild docs/source docs/build/html"]
clean-docs = ["make -C docs clean html"]
style = ["ruff {args:.}", "black --check --diff {args:.}", "mypy {args:./src}"]
fmt = ["black  -t py310 {args:.}", "ruff --fix {args:.}", "style"]
all = ["fmt", "style", "test"]


[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11"]


[tool.black]
target-version = ["py310"]
line-length = 88

[tool.ruff]
target-version = "py310"
line-length = 88

select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "T201",
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  "S311",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["learn_python_with_tests"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["learn_python_with_tests", "tests"]
branch = true
parallel = true
omit = [
  "src/learn_python_with_tests/__about__.py",
]

[tool.coverage.paths]
learn_python_with_tests = ["src/learn_python_with_tests", "*/learn-python-with-tests/src/learn_python_with_tests"]
tests = ["tests", "*/learn-python-with-tests/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
